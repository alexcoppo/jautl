/*
    Copyright (c) 2000-2012 Alessandro Coppo
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    1. Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
    3. The name of the author may not be used to endorse or promote products
       derived from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
    OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
    IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
    NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
package net.sf.jautl.rng.sources;

import net.sf.jautl.rng.interfaces.GeneratorsInteger;
import net.sf.jautl.rng.interfaces.AdapterBlockedToBytesSource;
import net.sf.jautl.rng.interfaces.IIntegersSource;
import net.sf.jautl.rng.interfaces.IRandomizable;

/**
 * The class is the base of all entropy generators which use a non-cryptographics
 * hash function as source of "entropy".
 * 
 * Numbers are generated by hashing together the key value and the index one; the
 * index is then incremented.
 */
public abstract class RandomSourceIntHash implements IRandomizable, IIntegersSource {
	/**
	 * The key to use to select a specific sequence of generated numbers.
	 */
    protected int key;
    
    /**
     * The index in the sequence.
     */
    protected int index;

    protected RandomSourceIntHash() {
    	factoryDefault();
    }

	public void factoryDefault() {
		key = 0x01234567;
        index = 0;
	}

	/**
	 * Set a value for the key.
	 * @param key the new value
	 */
	public void setKey(int key) {
		this.key = key;
	}

	public void randomize(byte[] seed) {
		RandomSourceHMAC2104 rs = new RandomSourceHMAC2104();
        AdapterBlockedToBytesSource abtb = new AdapterBlockedToBytesSource(rs);
		rs.randomize(seed);
		setKey(GeneratorsInteger.generate(abtb));
        index = 0;
	}

    public abstract int nextInt();
}
